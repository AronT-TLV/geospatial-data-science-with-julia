# Geometric processing

```{julia}
#| echo: false
#| output: false
import Pkg
Pkg.activate(".")
```

In this chapter we give an overview of some of the advanced geometric processing
features of the framework, highlighting the ones that will be most useful in future
chapters.

From now on, we will assume that the main module of the framework is loaded in all
code examples:

```{julia}
using GeoStats
```

We will also assume that the Makie.jl backend is loaded:

```{julia}
import CairoMakie as Mke
```

## Geometries

We provide a vast list of geometries, which are organized into two main classes,
`Primitive` and `Polytope` geometries. A geometry is a `Primitive` if it can be
represented efficiently without discretization. For example, we can represent
a `Box` with two corner points or a `Ball` with center and radius:

```{julia}
box = Box((0, 0, 0), (1, 1, 1))
ball = Ball((0, 0, 2), 0.5)

viz([box, ball], color = ["teal", "slategray3"])
```

Other examples include the `Cylinder`:

```{julia}
cyl = Cylinder(1.0)

viz(cyl)
```

And the `Torus`:

```{julia}
torus = Torus((1, 1, 0), (-1, -1, 0), (1, -1, 0), 0.5)

viz(torus)
```

The full list can be obtained with Julia's `subtypes` function:

```{julia}
subtypes(Primitive)
```

A geometry is a `Polytope` if it can be represented as a combination of
"flat sides", which are also `Polytope` themselves. A 3D `Polytope` is
called a `Polyhedron`, a 2D `Polytope` is called a `Polygon` and a
1D `Polytope` is called a polygonal `Chain`. All these geometries
are represented internally with a list of vertices.

First, let's take a look into the `Polyhedron` geometries:

```{julia}
subtypes(Polyhedron)
```

The `Hexahedron` is a generalization of a 3D `Box` in the sense that it
doesn't need to be aligned with the coordinate system:

```{julia}
hex = Hexahedron((0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0),
                 (0, 0, 1), (1, 0, 1), (1, 1, 1), (0, 1, 1))

viz(hex)
```

In this case, we need to store all the 8 vertices instead of just the
corner points. Other examples of `Polyhedron` include the
`Tetrahedron` and the `Pyramid`.

Now, let's move to the `Polygon` geometries:

```{julia}
subtypes(Polygon)
```

We provide two types of `Polygon` that meet different application requirements.

The `Ngon` is a polygon without holes. Its vertices are stored in static
memory, and they are mostly used for discretization of other geometries
and geospatial domains. We provide type aliases to construct `Ngon` with
a specific number `N` of vertices:

`Triangle`, `Quadrangle`, `Pentagon`, ..., `Decagon`

The `Quadrangle` is a generalization of the 2D `Box` in the sense that it
doesn't need to be aligned with the coordinate system:

```{julia}
t = Triangle((0, 0), (1, 0), (1, 1))
q = Quadrangle((1, 1), (2, 1), (2, 2), (1, 2))

viz([t, q], color = ["teal", "slategray3"])
```

The `PolyArea` is a polygon with or without holes. Its vertices are
stored in dynamic memory, and they are mostly used for representation of
polygonal areas in GIS:

```{julia}
outer = [(0.0, 0.0), (1.0, 0.0), (1.0, 1.0), (0.0, 1.0)]
hole1 = [(0.2, 0.2), (0.4, 0.2), (0.4, 0.4), (0.2, 0.4)]
hole2 = [(0.6, 0.2), (0.8, 0.2), (0.8, 0.4), (0.6, 0.4)]
poly  = PolyArea(outer, [hole1, hole2])

viz(poly)
```

In the example above, the first list of vertices represents the external
boundary of the `PolyArea`, also known as the outer `Ring`. The other two
lists represent the two internal boundaries, or inner rings. The vector
of inner rings can be empty, in which case the `PolyArea` doesn't have holes.

Finally, let's take a look into the polygonal `Chain`: 

```{julia}
subtypes(Chain)
```

These are 1-dimensional polytopes connecting `Point`s in sequence. We've
seen the `Ring`s in the `PolyArea` and `Ngon` geometries:

```{julia}
r = rings(poly)

viz(r)
```

A `Ring` is closed meaning that its first and last `Point`s are connected
with a `Segment`. A `Rope` is an open `Ring` without the closing `Segment`:

```{julia}
viz(open.(r))
```

We can obtain the list of segments of a `Chain` with the `segments` function:

```{julia}
collect(segments(first(r)))
```

The `Segment` geometry is a `Chain` with just 2 vertices:

```{julia}
viz(Segment((0, 0), (1, 1)))
```

The only 0-dimensional `Polytope` is the `Point`:

```{julia}
viz(Point(0, 0))
```

Finally, there is the `Multi`-geometry, which is a set of
geometries seen as a single geometry. This is very common
in GIS to represent disconnected areas on a geographic map
that are related to each other (e.g., political areas):

```{julia}
Multi([Point(1, 2), Point(2, 3)])
```

```{julia}
Multi(r)
```

```{julia}
Multi([t, q])
```

## Predicates

Julia provides support for unicode characters in variable and function names.
We leverage this feature to define commonly used geometric predicates with
intuitive mathematical notation:

```{julia}
p = Point(0.0, 0.0)
b = Ball((0.5, 0.5), 1.0)

viz([p, b], color = ["teal", "slategray3"])
```

```{julia}
p ∈ b
```

```{julia}
b1 = Box((0, 0), (1, 1))
b2 = Box((0.5, 0.5), (2, 2))

viz([b1, b2], color = ["teal", "slategray3"])
```

```{julia}
b1 ⊆ b2
```

::: {.callout-note}

## Tip for all users

The symbol `∈` is obtained in Julia by typing `\in` and pressing the TAB key
on the keyboard. We could have used the syntax `p in b` or `in(p, b)` as well.
Similarly, the symbol `⊆` is obtained by typing `\subseteq`. We could have used
the syntax `issubseteq(b1, b2)` as well.

If you don't know the $\LaTeX$ name of a symbol, you can copy/paste it in the
Julia REPL in help mode:

```{julia}
#| eval: false
?∈
```

:::

Some predicates don't have well-established mathematical notation. For example,
a polygon `issimple` if it doesn't have holes nor self-intersections:

```{julia}
q = Quadrangle((0, 0), (1, 0), (1, 1), (0.6, 0.4))

viz(q)
```

```{julia}
issimple(q)
```

It `isconvex` if all line segments connecting two points of the polygon
are inside the polygon:

```{julia}
isconvex(q)
```

A very useful predicate is `instersects` (with a "s" at the end):

```{julia}
outer = [(0.0, 0.0), (1.0, 0.0), (1.0, 1.0), (0.0, 1.0)]
hole1 = [(0.2, 0.2), (0.4, 0.2), (0.4, 0.4), (0.2, 0.4)]
hole2 = [(0.6, 0.2), (0.8, 0.2), (0.8, 0.4), (0.6, 0.4)]
poly  = PolyArea(outer, [hole1, hole2])
ball1 = Ball((0.5, 0.5), 0.05)
ball2 = Ball((0.3, 0.3), 0.05)

viz([poly, ball1, ball2], color = ["slategray3", "teal", "brown"])
```

```{julia}
intersects(poly, ball1)
```

```{julia}
intersects(poly, ball2)
```

It tells whether or not the geometries intersect, without actually
computing the intersection. The `intersection` itself is considered
a geometric operation as discussed in the next section.

Please consult the official documentation for the full list of predicates.

## Operations

Geometric operations transform a geometry or a set of geometries into
a new geometry. For example, the intersection of two segments can be
a `Point`, a `Segment` or `nothing`:

```{julia}
s1 = Segment((0.0, 0.0), (1.0, 0.0))
s2 = Segment((0.5, 0.0), (2.0, 0.0))

s1 ∩ s2
```

::: {.callout-note}

## Tip for advanced users

For performance-sensitive applications, it is wise to replace the
`∩` operation by its the 3-argument version named `intersection`:

```{julia}
intersection(s1, s2) do I
  if I == Crossing
    return 1
  else
    return 0
  end
end
```

The example above uses Julia's do-syntax to define a function in place.
The function takes the intersection type `I` and creates branches that
return the same type (`Int` in this case) for type stability. The more
we reduce the number of branches and types, the more the Julia compiler
will be able to infer the output type.

:::

Likewise, the intersection of two 2D geometries can be obtained with:

```{julia}
outer = [(8, 0), (4, 8), (2, 8), (-2, 0), (0, 0), (1, 2), (5, 2), (6, 0)]
inner = [(4, 4), (2, 4), (3, 6)]
poly  = PolyArea(outer, [inner])
box   = Box((0, 1), (3, 7))

int = clip(poly, box, SutherlandHodgman())

viz([poly, box, boundary(int)],
    color = ["slategray3", "teal", "red"],
    alpha = [1.0, 0.2, 1.0])
```

The previous example makes use of the `boundary` of a geometry,
which is very useful to know:

```{julia}
boundary(poly)
```

Some operations like `measure` (`length`, `area` or `volume`) produce
numeric values. For example, the `area` of the letter "A" above is:

```{julia}
area(poly)
```

The `measure` of the `boundary` is known as the `perimeter` of the
geometry:

```{julia}
perimeter(poly)
```

All `Polytope` geometries have `vertices`:

```{julia}
vertices(poly)
```

Please consult the official documentation for the full list of operations.

## Algorithms

Any other function that is not a predicate nor an operation is called a geometric
processing "algorithm" in the framework. We provide a list of advanced algorithms
for discretization, simplification, refinement, convex hull, etc.

Below we illustrate some of these algorithms, which will be useful in future examples:

```{julia}
points = rand(Point2, 100)
bbox = boundingbox(points)

viz(bbox)
viz!(points, color = "black")
Mke.current_figure()
```

```{julia}
chull = convexhull(points)

viz(chull)
viz!(points, color = "black")
Mke.current_figure()
```