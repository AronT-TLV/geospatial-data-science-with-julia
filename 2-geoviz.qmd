# Scientific visualization

```{julia}
#| echo: false
#| output: false
import Pkg
Pkg.activate(".")
```

Now that we learned that geospatial data can be represented efficiently
with the geotable data structure, let's produce our first visualizations.

The visualization ecosystem in Julia is evolving very quickly. Among the various
visualization projects, [Makie.jl](https://github.com/MakieOrg/Makie.jl) by
@Danisch2021 is the most suited for
[scientific visualization](https://en.wikipedia.org/wiki/Scientific_visualization).

## viz/viz!

Makie.jl provides a plot recipe system developed after
[Plots.jl](https://github.com/JuliaPlots/Plots.jl) by @Breloff2023,
which enables automatic visualization of custom Julia types. Our
framework is integrated with this recipe system, and provides a
`viz`/`viz!` function for efficient visualization of geospatial data.

For illustration purposes, let's create a small geotable over a `CartesianGrid`:

```{julia}
using GeoStats

# two images of size 10x10
A = [sin(i+j) for i in 1:10, j in 1:10]
B = [i for i in 1:10, j in 1:10]

# place images in named tuple
tab = (A=A, B=B)

# omit the domain to get a grid
gdf = georef(tab)
```

Notice how we omitted the domain in the `georef` function. By default,
the function will check the size of the arrays in the named tuple and
will create a `CartesianGrid` starting at the origin:

```{julia}
gdf.geometry
```

First, we need to import any of the Makie.jl backends for visualization:

```{julia}
import CairoMakie as Mke
```

::: {.callout-note}

We import the backend as `Mke` to avoid polluting the Julia
session with names from the visualization stack.

:::

Julia will trigger the compilation of `viz`/`viz!` in GeoStats.jl
whenever a Makie.jl backend is loaded in the same session. The
function can be used to display geometries within a domain using
colors taken from any vector of
[Colors.jl](https://github.com/JuliaGraphics/Colors.jl).
Because it is common to use another column of the geotable as
the vector of colors, the framework will automatically convert
(continuous and categorical) values into colors:

```{julia}
viz(gdf.geometry, color = gdf.A)
```

We could also pass a single color for all geometries:

```{julia}
viz(gdf.geometry, color = :teal)
```

Or pass the other column in the geotable with a random vector of
transparencies:

```{julia}
viz(gdf.geometry, color = gdf.B, alpha = rand(100))
```

To really see the benefits of the framework, let's load GIS
data from disk and visualize it:

```{julia}
using GeoTables

gis = GeoTables.load("data/geotable.geojson")

viz(gis.geometry, color = 1:4)
```

We can easily visualize two or more geotables in the same scene
by calling the `viz!` function:

```{julia}
viz(gdf.geometry, color = gdf.A)
viz!(gis.geometry, color = 1:4)

# display current figure
Mke.current_figure()
```

Let's add a set of points to the scene:

```{julia}
pts = [Point(-20, -10), Point(-20, 0), Point(-40, 10)]

viz!(pts, color = 1:3)

Mke.current_figure()
```

And a set of line segments to conclude the example:

```{julia}
seg = [Segment((-40, -10), (0, 0)), Segment((-40, 0), (-20, 10))]

viz!(seg, color = 1:2)

Mke.current_figure()
```

::: {.callout-note}

## Tip for all users

Makie.jl can set the aspect ratio of the axis after
the visualization is created. The following code
can be used to adjust the aspect ratio for the
data in the scene:

```{julia}
ax = Mke.current_axis()
ax.aspect = Mke.DataAspect()
Mke.current_figure()
```

:::

::: {.callout-note}

## Tip for advanced users

Makie.jl dispatches the `viz` and `viz!` functions whenever it encounters
a geospatial domain, a vector of geometries or a single geometry from Meshes.jl.
This means that you can replace `viz` with `Mke.plot` and `viz!` with `Mke.plot!`
in scripts and the result will be the same.

:::

The `viz`/`viz!` combo is very powerful. It can be used to
visualize geospatial variables over multiple geospatial domains with
a consistent set of aesthetic options. However, it is still not enough
for geospatial data science.

## viewer

As geospatial data scientists we are often interested in quick inspection
of intermediate results from multivariate statistical analysis. Visualizing
all the variables manually with `viz`/`viz!` can be very time consuming.
To address this issue, the framework provides a basic `viewer` that displays
all "viewable" variables stored in a geotable:

```{julia}
viewer(gdf)
```

It adds interactive elements to the scene, including a menu to select the
variable used as color, and a color bar that automatically updates upon
selection of new variables on the menu. The `viewer` will be particularly
useful when we start to work with transforms in [Part II](4-feattrans.qmd)
of the book. The pipe operator (`|>`) in Julia will be preferred for reasons
that will become clearer later:

```{julia}
gdf = georef((A=rand(1000), B=rand(1000)), rand(3, 1000))

gdf |> viewer
```

```{julia}
gdf = georef((A=rand(1000), B=rand(1000)), CartesianGrid(10, 10, 10))

gdf |> viewer
```